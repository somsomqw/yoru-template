// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  email String @unique
  password String
  isAdmin Boolean @default(false)
  cart Cart?
  order Order[]
  address Address[]
  reviews Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id Int @id @default(autoincrement())
  name String @unique
  product Product[]
}

model Product {
  id String @id @default(uuid())
  title String
  description String
  discount Boolean
  discountRate Int?
  price Int
  quantity Int
  categoryId Int
  category Category @relation(fields: [categoryId], references: [id])
  reviews Review[]
  thumbnail String
  images String[]
  size String[]
  color String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id String @id @default(uuid())
  userEmail String @unique
  user User @relation(fields: [userEmail], references: [email])
  products CartData[] 
}

model CartData {
  id String @id @default(uuid())
  productId String
  title String
  size String?
  color String?
  quantity Int
  price Int
  cartId String?
  orderId String?
  cart Cart? @relation(fields: [cartId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])
}

model Campagign {
  id Int @id @default(autoincrement())
  title String
  description String
  thumbnail String
}

model Order {
  id String @id @default(uuid())
  userEmail String
  user User @relation(fields: [userEmail], references: [email])
  products CartData[]
  status OrderStatus
  totalPrice Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id String @id @default(uuid())
  userEmail String
  user User @relation(fields: [userEmail], references: [email])
  nameKanji String
  nameKana String
  phone String
  zipcode String
  address1 String
  address2 String
  isDefault Boolean
}

model Review {
  id String @id @default(uuid())
  userEmail String
  orderId String
  user User @relation(fields: [userEmail], references: [email])
  productId String
  product Product @relation(fields: [productId], references: [id])
  score Float
  image String
  title String
  description String
  createdAt DateTime @default(now())
  @@unique([orderId, productId])
}

enum OrderStatus {
  PAYMENT_SUCCESS
  PAYMENT_PROCEED
  DELIVERY_SUCCESS
  DELIVERY_PROCEED
  DELIVERY_READY
  ORDER_CANCEL
  PROGRESS_FINISHIED
}